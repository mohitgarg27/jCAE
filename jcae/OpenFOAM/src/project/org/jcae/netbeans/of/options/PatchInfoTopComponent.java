/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package project.org.jcae.netbeans.of.options;

import java.awt.GridLayout;
import java.util.Collection;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import org.netbeans.api.project.Project;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.nodes.Node;
import org.openide.util.Lookup;
import org.openide.windows.TopComponent;
import org.openide.util.NbBundle.Messages;
import org.openide.util.Utilities;
import project.org.jcae.netbeans.of.nodes.PatchNode;

/**
 * Top component which displays something.
 */
@ConvertAsProperties(
        dtd = "-//project.org.jcae.netbeans.of.options//PatchInfo//EN",
        autostore = false)
@TopComponent.Description(
        preferredID = "PatchInfoTopComponent",
        //iconBase="SET/PATH/TO/ICON/HERE", 
        persistenceType = TopComponent.PERSISTENCE_ALWAYS)
@TopComponent.Registration(mode = "rightSlidingSide", openAtStartup = true)
@ActionID(category = "Window", id = "project.org.jcae.netbeans.of.options.PatchInfoTopComponent")
@ActionReference(path = "Menu/Window" /*, position = 333 */)
@TopComponent.OpenActionRegistration(
        displayName = "#CTL_PatchInfoAction",
        preferredID = "PatchInfoTopComponent")
@Messages({
    "CTL_PatchInfoAction=PatchInfo",
    "CTL_PatchInfoTopComponent=PatchInfo Window",
    "HINT_PatchInfoTopComponent=This is a PatchInfo window"
})
public final class PatchInfoTopComponent extends TopComponent {

    public PatchInfoTopComponent() {
        initComponents();
        setName(Bundle.CTL_PatchInfoTopComponent());
        setToolTipText(Bundle.HINT_PatchInfoTopComponent());

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
    @Override
    public void componentOpened() {
        // TODO add custom code on component opening
        
        PatchNode pNode=null;
        Project p = null;
        for(Node n:TopComponent.getRegistry().getActivatedNodes())
        {
            TopComponent tc = TopComponent.getRegistry().getActivated();
            //JOptionPane.showMessageDialog(tc, tc.getClass());
            PatchNode pn = n.getLookup().lookup(PatchNode.class);
            if(pn!=null)
            {
                pNode = pn;
                p = pn.getLookup().lookup(Project.class);
                break;
            }
        }
        
        if(pNode!=null)
        {
            removeAll();
            setDisplayName(pNode.getpName());
            setLayout(new GridLayout(2,1));
            JPanel j = new PatchBasicInfo(pNode, p);
            add(j);
            JPanel j1 = new PatchFieldInfo(pNode, p);
            add(j1);
        }
        else
            removeAll();
                

    }

    @Override
    public void componentClosed() {
        // TODO add custom code on component closing
    }

    void writeProperties(java.util.Properties p) {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
        // TODO store your settings
    }

    void readProperties(java.util.Properties p) {
        String version = p.getProperty("version");
        // TODO read your settings according to their version
    }
}
